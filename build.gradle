plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
    maven { url 'https://jitpack.io' }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = uri("https://maven.pkg.github.com/ExcessiveAmountsOfZombies/OctoEconomyApi")
        credentials {
            username = project.findProperty("gpr.user")
            password = project.findProperty("gpr.key")
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.1:2021.12.19")
    }
    modImplementation(include("org.spongepowered:configurate-hocon:4.1.2"))
    modImplementation(include("org.spongepowered:configurate-core:4.1.2"))
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation 'me.lucko:fabric-permissions-api:0.1-SNAPSHOT'
    include 'me.lucko:fabric-permissions-api:0.1-SNAPSHOT'

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("com.epherical.octo-economy-api:octoeconomyapi:1.0.1")
    modCompileOnly "curse.maven:ftb-quests-fabric-438496:3725770"
    modCompileOnly "curse.maven:ftb-library-fabric-438495:3725484"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": version
    }
}
loom {
    accessWidenerPath = file("src/main/resources/professions.accesswidener")

    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.modid=professions"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}



// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
